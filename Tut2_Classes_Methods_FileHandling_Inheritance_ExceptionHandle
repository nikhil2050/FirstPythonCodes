# Adding default values to params
def hello(greet="Hello", name="World"):
    print("%s %s"%(greet, name))
hello("Hi")           # Hi World


# Using named params. So, order of args does NOT matter
def hello1(greet, name):
    print("%s %s"%(greet,name))
hello(name="Mars", greet="Hello")


""" Variable length function parameters allow to create a func,
which accept any number of params. *params is treated as tuple."""
def print_params(*params):
    print(params)           # ('Hi', 'there')
    
    for param in params:
        print(param)         # Iterate all variables

print_params("Hi", "there")


""" Variable named params """
def print_params2(**params):
    print(params)           # {'a1': 1, 'a2': 2, 'a3': 3}
print_params2(a1=1, a2=2, a3=3)


# Combination of above func declarations
def print_params3(b1,b2,b3=3,*pospar,**keypar):
    print(b1,b2,b3,"\tpospar:",pospar,"\tkeypar:",keypar)
print_params3(1,2,3,5,6,7,foo=1, bar=2)
print_params3(1,2)
print_params3(1,2,foo=1, bar=2)


# LAMBDA Functions
def make_inc(n):
    return lambda x:x+n
f = make_inc(42)
#print(f)
#f(0)                   # 42
#f(5)                    # 47
make_inc(100)(1)        # 100+1


# LAMBDA Filter (Fetch all nos. with filter)
my_list = [1, 5, 4, 6, 8, 11, 3, 12]
new_list = list( filter(lambda x:(x%2==0), my_list) )  #[4, 6, 8, 12]
print(new_list)


# LAMBDA Map (Square all nos. in list)
my_list = [1, 5, 4, 6, 8, 11, 3, 12]
new_list = list( map(lambda x:x*2, my_list))  #[2, 10, 8, 12, 16, 22, 6, 24] 
print(new_list)


# Higher Order Function -> Function as argument
def summation(nums):
    return sum(nums)
def main2(f, *args):
    result = f(*args)
    print(result)
#if __name__ == "__main__":      # What is this?????
#    main2(summation, [1,2,3,4])
main2(summation, [1,2,3,4])    



# Higher Order Function -> Function as a return value
def add_2nums(x,y):
    return x+y
def add_3nums(x,y,z):
    return x+y+z
def get_appropriate_funcs(num_len):
    if num_len == 2:
        return add_2nums
    else:
        return add_3nums
    
if __name__=="__main__":   # What is this?????
    args = [1,2,3]
    num_len = len(args)
    res_func = get_appropriate_funcs(num_len)
    print(res_func)        #<function add_3nums at 0x00000230BF7B4F28>
    print(res_func(*args)) # 6


# NESTED FUNCTION
""" Encapsulation : Use inner functions to protect them from what is  
happening outside of the function. ie. they are hidden from global scope"""

def outer(num1):
    def inner_incr(num1):  # Hidden from outer code
        return num1 + 1
    num2 = inner_incr(num1)
    print(num1, num2)
#inner_incr(10) # NameError: name 'inner_incr' is not defined
outer(10)



# RECURSIVE FUNCTION using inner function
"""We can create inner function if same logic is being used at multiple places 
within that function and one of the good use case for this is recursive function"""

def factorial(number):
    # Error handling
    if not isinstance(number, int):
        raise TypeError("Sorry. 'number' must be an integer.")
    if not number >= 0:
        raise ValueError("Sorry. 'number' must be zero or positive.")

    def inner_factorial(number):
        if number <= 1:
            return 1
        return number*inner_factorial(number-1)
    return inner_factorial(number)

# Call the outer function.
print(factorial(3))



# CURRYING(CLOSURE) FUNCTION
"""In mathematics and computer science, currying is the technique of 
breaking down the evaluation of a function that takes multiple arguments 
into evaluating a sequence of single-argument functions.

The purpose of function currying is to easily get specialized functions 
from more general functions."""

def outer_func(msg):
    def inner_func():
        print(msg)
    return inner_func
obj1 = outer_func("Hello")
obj1()                      # Method 1 
outer_func("Hi..")()        # Method 2



# When to use CLOSURES ?
""" Closures avoid the use of global values and provide some form of data-hiding.
It can also provide an object-oriented solution to the problem.

When there are few methods (one method in most cases) to be implemented in a class, 
closures can provide an alternate and more elegant solutions.

But when no. of attributes and methods get larger, better implement a class."""

def make_multiple_of(n):
    def multiplier(x):
        return x*n
    return multiplier

times3 = make_multiple_of(3)
times5 = make_multiple_of(5)

print(times3(9))
print(times5(3))



# LOCAL & GLOBAL Variables
myGlobal = "Global"
def foo():
    global myGlobal     # To change the value of global variable
    myLocal = "Local"
    myGlobal = myGlobal*3 # Changing global calue here
    print(myGlobal)
    print(myLocal)
foo()



# NONLOCAL Variables
"""Nonlocal var are used in nested functions, whose local scope is undefined.
So, var can be neither in local nor global scope. """
globalVar = "glo-b-al"
def outer():
    outerVar = "local"
    outerVar2 = "local"

    def inner():
        nonlocal outerVar
        outerVar = "nonlocal"
        outerVar2 = "nonlocal"
        print("From inner() :\touterVar:",outerVar,"\touterVar2:",outerVar2)
        # From inner() :	outerVar: nonlocal 	outerVar2: nonlocal
        
        global globalVar
        globalVar = "globa-l"
        print(globalVar)        # globa-l
    inner()
    print("From outer() :\touterVar:",outerVar,"\touterVar2:",outerVar2)
    # From outer() :	outerVar: nonlocal 	outerVar2: local
    
    print(globalVar)            # globa-l
outer()



# FILE Handling (READ)
f = open(r'D:\temp\newtest.txt')
f.read()
#f.readline()
f.close()


# File Handling 1
with open(r"D:\temp\newtest.txt","w") as fh:
    fh.write("To write or not to write\n is the question!\n")


# File Handling 1
with open(r"D:\temp\newtest.txt") as fobj:
    for line in fobj:
        print(line.rstrip())


# Copy a file
fobj_in = open(r"D:\temp\newtest.txt")
fobj_out= open(r"D:\temp\newtest-copy.txt","w")
i = 1
for line in fobj_in:
    print(line.rstrip())
    fobj_out.write(str(i)+":"+line)
    i = i + 1
fobj_in.close()
fobj_out.close()


# IMPORT and HELP
import math

print(math.floor.__doc__)
help(math.floor)


# CLASSES & OBJECTS
class Point:
    
    # Class variable shared by all instances
    pi = 3.14
    count = 0
    
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y
        self.pi = 3
        Point.count = Point.count + 1
        
    def squareX(self):
        return self.x ** 2
    
    # Operator Overloading
    def __add__(self,other):
        return Point(self.x+other.x, self.y+other.y)

    # Like TOSTRING()
    def __repr__(self):
        return "{0} {1}".format(self.x, self.y)
    
p1 = Point(2,3)
p2 = Point(4,5)
print("Count::", Point.count)

print (p1.x, p1.y)
print(p1.squareX())
print(p1 + p2)

print("p1.pi: ",p1.pi)
print("pi: ",Point.pi)
print("p1.pi: ",p1.pi)


# INHERITANCE : Create a class by inheriting all features from other class
class A:
    def hello(self):
        print("Hello, I'm A")
class B(A):
    pass
a = A()
b = B()
a.hello()
b.hello()   # Derived classes may OVERRIDE METHODS from Base classes


# EXCEPTION HANDLING
try:
    k = 12
    if k==1:
        print(55/0)
    else:
        raise IOError("Some IO issue")
except ZeroDivisionError:
    print("ZeroDivisionError handled")
except (AttributeError, IOError):
    print("AttributeError/IOError handled")
except:
    print("Other Exception handled")
finally:
    print("In finally()")

